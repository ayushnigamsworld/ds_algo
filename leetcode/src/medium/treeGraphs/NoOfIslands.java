package medium.treeGraphs;

import java.util.LinkedList;
import java.util.Queue;

public class NoOfIslands {

    public static void main(String[] args) {
        /*char[][] grid = new char[][]{
                {'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},
                {'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},
                {'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},
                {'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                {'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                {'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},
                {'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},
                {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},
                {'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},
                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                {'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},
                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                {'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},
                {'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},
                {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},
                {'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},
                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}};*/
        char[][] grid = new char[][] {
                {'1','1','0','0','0'},
                {'1','1','0','0','0'},
                {'0','0','1','0','0'},
                {'0','0','0','1','1'}
        };
        NoOfIslands noOfIslands = new NoOfIslands();
        System.out.println(noOfIslands.numberIslands(grid));
    }

    private int numberIslands(char[][] grid) {
        int res = 0;
        boolean visited[][] = new boolean[grid.length][grid[0].length];
        Queue<Pair> queue = new LinkedList<>();
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == '1' && !visited[i][j]) {
                    queue.add(new Pair(i, j));
                    res++;
                }
                while (!queue.isEmpty()) {
                    Pair p = queue.poll();
                    int x = p.x;
                    int y = p.y;
                    visited[x][y] = true;
                    if (x - 1 >= 0 && grid[x - 1][y] == '1' && !visited[x - 1][y]) {
                        visited[x-1][y] = true;
                        queue.add(new Pair(x - 1, y));
                    }
                    if (x + 1 < grid.length && grid[x + 1][y] == '1' && !visited[x + 1][y]) {
                        visited[x+1][y] = true;
                        queue.add(new Pair(x + 1, y));
                    }
                    if (y - 1 >= 0 && grid[x][y - 1] == '1' && !visited[x][y - 1]) {
                        visited[x][y-1] = true;
                        queue.add(new Pair(x, y - 1));
                    }
                    if (y + 1 < grid[0].length && grid[x][y + 1] == '1' && !visited[x][y + 1]) {
                        visited[x][y+1] = true;
                        queue.add(new Pair(x, y + 1));
                    }
                }
            }
        }
        return res;
    }

    class Pair {
        int x;
        int y;

        Pair(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
}
